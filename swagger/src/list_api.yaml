/v1/wallet/{wallet_address}/user_id:
  get:
    security:
        - Bearer: []
    tags:
      - Wallet
    summary: Get User ID by wallet_address
    operationId: getUserIdByWalletAddress
    parameters:
    - name: jwt
      in: header
      description: IdToken
      required: true
      schema:
        type: string
      example: "Bearer eyxxx"
    - name: public_key
      in: header
      description: Public Key
      required: true
      schema:
        type: string
      example: "02d9fbeeb08f28182c10733f79180bcace5ef68b2841c83252e3574be1d97492e2"
    - name: wallet_address
      in: path
      description: Wallet Address
      required: true
      schema:
        type: string
      example: "0x60f80121c31a0d46b5279700f9df786054aa5ee6"
    responses:
      '200':
        description: success
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletUser'
      '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUnauthorized'
      '500':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseInternalServerError'

/v1/wallet/{wallet_address}/nft:
  get:
    security:
        - Bearer: []
    tags:
      - Wallet
    summary: Get all or only relevant
    operationId: getNftsByWalletAddress
    parameters:
    - name: jwt
      in: header
      description: IdToken
      required: true
      schema:
        type: string
      example: "Bearer eyxxx"
    - name: public_key
      in: header
      description: Public Key
      required: true
      schema:
        type: string
      example: "02d9fbeeb08f28182c10733f79180bcace5ef68b2841c83252e3574be1d97492e2"
    - name: wallet_address
      in: path
      description: WAllet Address
      required: true
      schema:
        type: string
      example: "0x60f80121c31a0d46b5279700f9df786054aa5ee6"
    - name: count
      in: query
      description: Limit
      required: false
      schema:
        type: number
      example: 10
    - name: page
      in: query
      description: Page number
      required: false
      schema:
        type: number
      example: 0
    responses:
      '200':
        description: success
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NFTListResponse'
      '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUnauthorized'
      '500':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseInternalServerError'
/v1/user:
  post:
    security:
    - Bearer: []
    tags:
      - User
    summary: Create new user
    operationId: addUser
    parameters:
    - name: jwt
      in: header
      description: IdToken
      required: true
      schema:
        type: string
      example: "Bearer eyxxx"
    - name: public_key
      in: header
      description: Public Key
      required: true
      schema:
        type: string
      example: "02d9fbeeb08f28182c10733f79180bcace5ef68b2841c83252e3574be1d97492e2"
    requestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          example:
            {
              "verification_code": "bee17444-88d4-4cc8-b667-2e5759493c07",
              "wallet_address": '0x328973ce1433d7593191271f75a428af55c6528f'
            }
    responses:
      '201':
        description: Created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommonResponse'
            example: {
              "message": "Success",
              "id_info": {
                "key": "user_id",
                "value": "9490ebf5-e378-4074-97d0-3ce5004ae918"
              }
            }
      '400':
          description: Bad Request(Verification code is already used)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseBadRequest'
      '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUnauthorized'
      '403':
        description: Forbidden(Verification code is not verified)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseForbidden'
      '404':
        description: Not Found(Verification code is not found)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseNotFound'
      '409':
        description: Conflict
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseConflict'
      '500':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseInternalServerError'
/v1/user/{user_id}:
  get:
    security:
    - Bearer: []
    tags:
      - User
    summary: Get user info
    operationId: getUser
    parameters:
    - name: jwt
      in: header
      description: IdToken
      required: true
      schema:
        type: string
      example: "Bearer eyxxx"
    - name: public_key
      in: header
      description: Public Key
      required: true
      schema:
        type: string
      example: "02d9fbeeb08f28182c10733f79180bcace5ef68b2841c83252e3574be1d97492e2"
    - name: user_id
      in: path
      description: User ID
      required: true
      schema:
        type: string
      example: "9490ebf5-e378-4074-97d0-3ce5004ae918"
    responses:
      '200':
        description: success
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              {
                "message": "Success",
                "user_id": "9490ebf5-e378-4074-97d0-3ce5004ae918",
                "nickname": "Satoshi Tanaka",
                "type_of_login": "email",
                "is_sent_token": true,
                "is_admin": true,
                "user_role_ids": [ "99999" ],
                "wallets": [
                  {
                    "wallet_address": "0x67dF41d7Df0b07EcC985D87E093D48bbbab68E74",
                    "wallet_public_key": "0384cdbc234bc15ab15c56d936f83dcc977e8173877b7b1c9abbd429d484f50865"
                  }
                ],
                "created_by": "f17f35f5-f654-4fb8-bdfb-be35f0940b0f",
                "created_at": 1669182751764,
                "updated_by": "f17f35f5-f654-4fb8-bdfb-be35f0940b0f",
                "updated_at": 1669186466597,
                "delete_flg": false
              }
      '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUnauthorized'
      '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseNotFound'
      '500':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseInternalServerError'


/v1/csrf:
  get:
    security:
    - Bearer: []
    tags:
    - CSRF
    summary: Refresh CSRF token and return CSRF token
    operationId: getCsrf
    parameters:
    - name: jwt
      in: header
      description: IdToken
      required: true
      schema:
        type: string
      example: "Bearer eyxxx"
    responses:
      '200':
        description: success
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuccessResponse'
            example: {
              "csrf_token": "xyz"
            }

/v1/verification-code/verify:
  put:
    tags:
      - VerificationCode
    summary: Verify verification code
    operationId: verify-verification-code
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              verification_code:
                type: string
                format: uuid
    responses:
      '200':
        description: verification result (success or fail)
        content:
          application/json:
            example:
              message: Success
      '400':
        description: Bad Request(Verification code is already used)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseBadRequest'
      '404':
        description: Not Found(Verification code is not found)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseNotFound'
      '500':
        description: Service Unavailable
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseInternalServerError'

/v1/login:
  post:
    tags:
      - Login
    summary: Process the login to the system
    operationId: login
    parameters:
      - name: jwt
        in: header
        description: IdToken
        required: true
        schema:
          type: string
        example: "jwt eyxxx"
      - name: public_key
        in: header
        description: Public Key
        required: true
        schema:
          type: string
        example: "02d9fbeeb08f28182c10733f79180bcace5ef68b2841c83252e3574be1d97492e2"
    responses:
      '200':
        description: success
        content:
          application/json:
            example:
              message: Success
      '400':
        description: Bad Request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseBadRequest'
      '403':
        description: Forbidden(Does not have NFT/SBT)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseForbidden'
      '404':
        description: Not Found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseNotFound'
      '500':
        description: Service Unavailable
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponseInternalServerError'
